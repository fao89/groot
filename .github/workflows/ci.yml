on:
  push:
    branches:
      - '*'
  pull_request:
  schedule:
    - cron:  '13 5 * * *'

name: Continuous Integration

jobs:
  ubuntu:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: groot
          POSTGRES_USER: groot
          POSTGRES_DB: groot
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        ports:
          - 6379:6379
    strategy:
      matrix:
        rust:
          - stable

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Prepare env
        run: |
          mv .env.example .env
          cat >> requirements.yml<< EOF
          ---
          roles:
            - geerlingguy.postgresql
          collections:
            - community.kubernetes
          EOF
      - name: Run
        run: |
          ./target/release/groot &
          sleep 2
          curl -X POST -F 'requirements=@requirements.yml' http://127.0.0.1:3030/sync/
          sleep 30
          ansible-galaxy collection install --force -vvv community.kubernetes -c -s http://127.0.0.1:3030/
          wget https://galaxy.ansible.com/download/testing-k8s_demo_collection-0.0.3.tar.gz
          ansible-galaxy collection publish -c -s http://127.0.0.1:3030/ testing-k8s_demo_collection-0.0.3.tar.gz -vvvv
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        rust:
          - stable

    steps:
      - uses: actions/checkout@v2

      - name: Install libpq
        run: |
          brew install libpq
          brew link --force libpq
          echo "PQ_LIB_DIR=$(brew --prefix libpq)/lib" >> $GITHUB_ENV

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
  image:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref_name == 'main'
    needs: [ubuntu, macos]
    steps:
      - uses: actions/checkout@v3
      - name: Quay login
        env:
          QUAY_BOT_PASSWORD: ${{ secrets.QUAY_BOT_PASSWORD }}
          QUAY_BOT_USERNAME: ${{ secrets.QUAY_BOT_USERNAME }}
        run: echo "$QUAY_BOT_PASSWORD" | docker login -u "$QUAY_BOT_USERNAME" --password-stdin quay.io
      - name: Push image to quay
        run: |
          sed -e '1 s/\(^FROM\)/FROM --platform=\$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross
          docker buildx create --name project-v3-builder
          docker buildx use project-v3-builder
          PLATFORMS=linux/arm64,linux/amd64,linux/s390x,linux/ppc64le
          docker buildx build --push --platform=${PLATFORMS} --tag quay.io/fabricio_aguiar/groot:latest -f Dockerfile.cross .
          docker buildx rm project-v3-builder
          rm Dockerfile.cross
